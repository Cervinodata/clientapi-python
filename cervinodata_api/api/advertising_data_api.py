# coding: utf-8

"""
    Cervinodata API documentation

    <div style='margin: 2em 0;'> <p> Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>). </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>

    The version of the OpenAPI document: 1.0.0
    Contact: support@cervinodata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated

from cervinodata_api.api_client import ApiClient, RequestSerialized
from cervinodata_api.api_response import ApiResponse
from cervinodata_api.rest import RESTResponseType


class AdvertisingDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_ad_account_report_per_organisation_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad account report per organisation per day

        Ad account report per organisation per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_account_report_per_organisation_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_account_report_per_organisation_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad account report per organisation per day

        Ad account report per organisation per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_account_report_per_organisation_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_account_report_per_organisation_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad account report per organisation per day

        Ad account report per organisation per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_account_report_per_organisation_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_account_report_per_organisation_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-account-report-per-organisation-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ad_accounts(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad accounts by organisation

        Ad accounts by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_accounts_serialize(
            organisation_uuid=organisation_uuid,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_accounts_with_http_info(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad accounts by organisation

        Ad accounts by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_accounts_serialize(
            organisation_uuid=organisation_uuid,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_accounts_without_preload_content(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad accounts by organisation

        Ad accounts by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_accounts_serialize(
            organisation_uuid=organisation_uuid,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_accounts_serialize(
        self,
        organisation_uuid,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuid is not None:
            _path_params['organisationUuid'] = organisation_uuid
        # process the query parameters
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-accounts/{organisationUuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ad_campaign_report_per_day(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad campaign report per day by organisation

        Ad campaign report per day by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_day_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_campaign_report_per_day_with_http_info(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad campaign report per day by organisation

        Ad campaign report per day by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_day_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_campaign_report_per_day_without_preload_content(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad campaign report per day by organisation

        Ad campaign report per day by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_day_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_campaign_report_per_day_serialize(
        self,
        organisation_uuid,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuid is not None:
            _path_params['organisationUuid'] = organisation_uuid
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-campaign-report-per-day/{organisationUuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad campaign report per organisation per account per campaign per device per day

        Ad campaign report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad campaign report per organisation per account per campaign per device per day

        Ad campaign report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad campaign report per organisation per account per campaign per device per day

        Ad campaign report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-campaign-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ad_campaign_report_per_organisation_per_account_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad campaign report per organisation per account per day

        Ad campaign report per organisation per account per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_organisation_per_account_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_campaign_report_per_organisation_per_account_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad campaign report per organisation per account per day

        Ad campaign report per organisation per account per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_organisation_per_account_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_campaign_report_per_organisation_per_account_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad campaign report per organisation per account per day

        Ad campaign report per organisation per account per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaign_report_per_organisation_per_account_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_campaign_report_per_organisation_per_account_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ad_campaigns(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad campaigns by organisation

        Ad campaigns by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaigns_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_campaigns_with_http_info(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad campaigns by organisation

        Ad campaigns by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaigns_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_campaigns_without_preload_content(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad campaigns by organisation

        Ad campaigns by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_campaigns_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_campaigns_serialize(
        self,
        organisation_uuid,
        from_date,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuid is not None:
            _path_params['organisationUuid'] = organisation_uuid
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-campaigns/{organisationUuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ad_groups(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return ad groups by organisation

        Ad groups by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_groups_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ad_groups_with_http_info(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return ad groups by organisation

        Ad groups by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_groups_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ad_groups_without_preload_content(
        self,
        organisation_uuid: Annotated[StrictStr, Field(description="Organisation uuid")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return ad groups by organisation

        Ad groups by organisation

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param format: Output format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ad_groups_serialize(
            organisation_uuid=organisation_uuid,
            from_date=from_date,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ad_groups_serialize(
        self,
        organisation_uuid,
        from_date,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuid is not None:
            _path_params['organisationUuid'] = organisation_uuid
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/ad-groups/{organisationUuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return adform extended report per organisation per account per campaign per creative per day

        Adform extended report per organisation per account per campaign per creative per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return adform extended report per organisation per account per campaign per creative per day

        Adform extended report per organisation per account per campaign per creative per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return adform extended report per organisation per account per campaign per creative per day

        Adform extended report per organisation per account per campaign per creative per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_adform_extended_report_per_organisation_per_account_per_campaign_per_creative_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/adform-extended-report-per-organisation-per-account-per-campaign-per-creative-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return adform extended report per organisation per account per campaign per day

        Adform extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return adform extended report per organisation per account per campaign per day

        Adform extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return adform extended report per organisation per account per campaign per day

        Adform extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_adform_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/adform-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return adform extended report per organisation per account per campaign per line item per day

        Adform extended report per organisation per account per campaign per line item per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return adform extended report per organisation per account per campaign per line item per day

        Adform extended report per organisation per account per campaign per line item per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return adform extended report per organisation per account per campaign per line item per day

        Adform extended report per organisation per account per campaign per line item per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_adform_extended_report_per_organisation_per_account_per_campaign_per_line_item_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/adform-extended-report-per-organisation-per-account-per-campaign-per-line-item-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return bing ads extended report per organisation per account per campaign per day

        Bing ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return bing ads extended report per organisation per account per campaign per day

        Bing ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return bing ads extended report per organisation per account per campaign per day

        Bing ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad custom conversion report per organisation per account per campaign per day

        Facebook ad custom conversion report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad custom conversion report per organisation per account per campaign per day

        Facebook ad custom conversion report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad custom conversion report per organisation per account per campaign per day

        Facebook ad custom conversion report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad extended report per organisation per account per campaign per ad group per day

        Facebook ad extended report per organisation per account per campaign per ad group per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad extended report per organisation per account per campaign per ad group per day

        Facebook ad extended report per organisation per account per campaign per ad group per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad extended report per organisation per account per campaign per ad group per day

        Facebook ad extended report per organisation per account per campaign per ad group per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad extended report per organisation per account per campaign per ad group per day plus

        Facebook ad extended report per organisation per account per campaign per ad group per day plus

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad extended report per organisation per account per campaign per ad group per day plus

        Facebook ad extended report per organisation per account per campaign per ad group per day plus

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad extended report per organisation per account per campaign per ad group per day plus

        Facebook ad extended report per organisation per account per campaign per ad group per day plus

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_plus_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day-plus/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad extended report per organisation per account per campaign per ad per day

        Facebook ad extended report per organisation per account per campaign per ad per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad extended report per organisation per account per campaign per ad per day

        Facebook ad extended report per organisation per account per campaign per ad per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad extended report per organisation per account per campaign per ad per day

        Facebook ad extended report per organisation per account per campaign per ad per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad extended report per organisation per account per campaign per day

        Facebook ad extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad extended report per organisation per account per campaign per day

        Facebook ad extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad extended report per organisation per account per campaign per day

        Facebook ad extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad extended report per organisation per account per campaign per day plus

        Facebook ad extended report per organisation per account per campaign per day plus

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad extended report per organisation per account per campaign per day plus

        Facebook ad extended report per organisation per account per campaign per day plus

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad extended report per organisation per account per campaign per day plus

        Facebook ad extended report per organisation per account per campaign per day plus

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_plus_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day-plus/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return facebook ad extended report per organisation per account per campaign per device per day

        Facebook ad extended report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return facebook ad extended report per organisation per account per campaign per device per day

        Facebook ad extended report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return facebook ad extended report per organisation per account per campaign per device per day

        Facebook ad extended report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return google ads report per organisation per account per campaign per device per day

        Campaign group google ads report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return google ads report per organisation per account per campaign per device per day

        Campaign group google ads report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return google ads report per organisation per account per campaign per device per day

        Campaign group google ads report per organisation per account per campaign per device per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/google-ads-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_hashed_ad_campaign_report_per_organisation_per_account_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return hashed ad campaign report per organisation per account per day

        Hashed ad campaign report per organisation per account per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_hashed_ad_campaign_report_per_organisation_per_account_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_hashed_ad_campaign_report_per_organisation_per_account_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return hashed ad campaign report per organisation per account per day

        Hashed ad campaign report per organisation per account per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_hashed_ad_campaign_report_per_organisation_per_account_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_hashed_ad_campaign_report_per_organisation_per_account_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return hashed ad campaign report per organisation per account per day

        Hashed ad campaign report per organisation per account per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_hashed_ad_campaign_report_per_organisation_per_account_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_hashed_ad_campaign_report_per_organisation_per_account_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/hashed-ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return linkedin ads extended report per organisation per account per campaign per day

        Linkedin ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return linkedin ads extended report per organisation per account per campaign per day

        Linkedin ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return linkedin ads extended report per organisation per account per campaign per day

        Linkedin ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return pinterest ads extended report per organisation per account per campaign per day

        Pinterest ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return pinterest ads extended report per organisation per account per campaign per day

        Pinterest ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return pinterest ads extended report per organisation per account per campaign per day

        Pinterest ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/pinterest-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return snapchat ads extended report per organisation per account per campaign per day

        Snapchat ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return snapchat ads extended report per organisation per account per campaign per day

        Snapchat ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return snapchat ads extended report per organisation per account per campaign per day

        Snapchat ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return tiktok ads extended report per organisation per account per campaign per day

        TikTok ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return tiktok ads extended report per organisation per account per campaign per day

        TikTok ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return tiktok ads extended report per organisation per account per campaign per day

        TikTok ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tik_tok_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/tiktok-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Return twitter ads extended report per organisation per account per campaign per day

        Twitter ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_with_http_info(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Return twitter ads extended report per organisation per account per campaign per day

        Twitter ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_without_preload_content(
        self,
        organisation_uuids: Annotated[List[StrictStr], Field(description="Organisation uuids")],
        from_date: Annotated[Optional[date], Field(description="From date")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return twitter ads extended report per organisation per account per campaign per day

        Twitter ads extended report per organisation per account per campaign per day

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
            organisation_uuids=organisation_uuids,
            from_date=from_date,
            date_format=date_format,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_serialize(
        self,
        organisation_uuids,
        from_date,
        date_format,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'organisationUuids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organisation_uuids is not None:
            _path_params['organisationUuids'] = organisation_uuids
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, date):
                _query_params.append(
                    (
                        'from_date',
                        from_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from_date', from_date))
            
        if date_format is not None:
            
            _query_params.append(('date_format', date_format))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data/twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


