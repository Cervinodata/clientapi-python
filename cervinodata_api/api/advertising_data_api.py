"""
    Cervinodata API documentation

    <div style='margin: 2em 0;'>  <p>  Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>).  </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@cervinodata.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cervinodata_api.api_client import ApiClient, Endpoint as _Endpoint
from cervinodata_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class AdvertisingDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_ad_account_report_per_organisation_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-account-report-per-organisation-per-day/{organisationUuids}',
                'operation_id': 'get_ad_account_report_per_organisation_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ad_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-accounts/{organisationUuid}',
                'operation_id': 'get_ad_accounts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuid',
                    'format',
                ],
                'required': [
                    'organisation_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuid':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuid': 'organisationUuid',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuid': 'path',
                    'format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ad_campaign_report_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-campaign-report-per-day/{organisationUuid}',
                'operation_id': 'get_ad_campaign_report_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuid',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuid':
                        (str,),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuid': 'organisationUuid',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuid': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-campaign-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}',
                'operation_id': 'get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ad_campaign_report_per_organisation_per_account_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}',
                'operation_id': 'get_ad_campaign_report_per_organisation_per_account_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ad_campaigns_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-campaigns/{organisationUuid}',
                'operation_id': 'get_ad_campaigns',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuid',
                    'from_date',
                    'format',
                ],
                'required': [
                    'organisation_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuid':
                        (str,),
                    'from_date':
                        (date,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuid': 'organisationUuid',
                    'from_date': 'from_date',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuid': 'path',
                    'from_date': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ad_groups_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/ad-groups/{organisationUuid}',
                'operation_id': 'get_ad_groups',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuid',
                    'from_date',
                    'format',
                ],
                'required': [
                    'organisation_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuid':
                        (str,),
                    'from_date':
                        (date,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuid': 'organisationUuid',
                    'from_date': 'from_date',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuid': 'path',
                    'from_date': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}',
                'operation_id': 'get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}',
                'operation_id': 'get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}',
                'operation_id': 'get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/google-ads-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}',
                'operation_id': 'get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_hashed_ad_campaign_report_per_organisation_per_account_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/hashed-ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}',
                'operation_id': 'get_hashed_ad_campaign_report_per_organisation_per_account_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/pinterest-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data/twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}',
                'operation_id': 'get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organisation_uuids',
                    'from_date',
                    'date_format',
                    'format',
                ],
                'required': [
                    'organisation_uuids',
                ],
                'nullable': [
                ],
                'enum': [
                    'date_format',
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('date_format',): {

                        "YYYY-MM-DD": "YYYY-MM-DD",
                        "YYYYMMDD": "YYYYMMDD"
                    },
                    ('format',): {

                        "CSV": "csv",
                        "JSON": "json"
                    },
                },
                'openapi_types': {
                    'organisation_uuids':
                        ([str],),
                    'from_date':
                        (date,),
                    'date_format':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'organisation_uuids': 'organisationUuids',
                    'from_date': 'from_date',
                    'date_format': 'date_format',
                    'format': 'format',
                },
                'location_map': {
                    'organisation_uuids': 'path',
                    'from_date': 'query',
                    'date_format': 'query',
                    'format': 'query',
                },
                'collection_format_map': {
                    'organisation_uuids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/csv',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_ad_account_report_per_organisation_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return ad account report per organisation per day  # noqa: E501

        Ad account report per organisation per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_account_report_per_organisation_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_ad_account_report_per_organisation_per_day_endpoint.call_with_http_info(**kwargs)

    def get_ad_accounts(
        self,
        organisation_uuid,
        **kwargs
    ):
        """Return ad accounts by organisation  # noqa: E501

        Ad accounts by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_accounts(organisation_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuid (str): Organisation uuid

        Keyword Args:
            format (str): Output format. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuid'] = \
            organisation_uuid
        return self.get_ad_accounts_endpoint.call_with_http_info(**kwargs)

    def get_ad_campaign_report_per_day(
        self,
        organisation_uuid,
        **kwargs
    ):
        """Return ad campaign report per day by organisation  # noqa: E501

        Ad campaign report per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_campaign_report_per_day(organisation_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuid (str): Organisation uuid

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuid'] = \
            organisation_uuid
        return self.get_ad_campaign_report_per_day_endpoint.call_with_http_info(**kwargs)

    def get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return ad campaign report per organisation per account per campaign per device per day  # noqa: E501

        Ad campaign report per organisation per account per campaign per device per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_ad_campaign_report_per_organisation_per_account_per_campaign_per_device_per_day_endpoint.call_with_http_info(**kwargs)

    def get_ad_campaign_report_per_organisation_per_account_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return ad campaign report per organisation per account per day  # noqa: E501

        Ad campaign report per organisation per account per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_campaign_report_per_organisation_per_account_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_ad_campaign_report_per_organisation_per_account_per_day_endpoint.call_with_http_info(**kwargs)

    def get_ad_campaigns(
        self,
        organisation_uuid,
        **kwargs
    ):
        """Return ad campaigns by organisation  # noqa: E501

        Ad campaigns by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_campaigns(organisation_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuid (str): Organisation uuid

        Keyword Args:
            from_date (date): From date. [optional]
            format (str): Output format. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuid'] = \
            organisation_uuid
        return self.get_ad_campaigns_endpoint.call_with_http_info(**kwargs)

    def get_ad_groups(
        self,
        organisation_uuid,
        **kwargs
    ):
        """Return ad groups by organisation  # noqa: E501

        Ad groups by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ad_groups(organisation_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuid (str): Organisation uuid

        Keyword Args:
            from_date (date): From date. [optional]
            format (str): Output format. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuid'] = \
            organisation_uuid
        return self.get_ad_groups_endpoint.call_with_http_info(**kwargs)

    def get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return bing ads extended report per organisation per account per campaign per day  # noqa: E501

        Bing ads extended report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_bing_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

    def get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return facebook ad custom conversion report per organisation per account per campaign per day  # noqa: E501

        Facebook ad custom conversion report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_facebook_ad_custom_conversion_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return facebook ad extended report per organisation per account per campaign per ad group per day  # noqa: E501

        Facebook ad extended report per organisation per account per campaign per ad group per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_group_per_day_endpoint.call_with_http_info(**kwargs)

    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return facebook ad extended report per organisation per account per campaign per ad per day  # noqa: E501

        Facebook ad extended report per organisation per account per campaign per ad per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_ad_per_day_endpoint.call_with_http_info(**kwargs)

    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return facebook ad extended report per organisation per account per campaign per day  # noqa: E501

        Facebook ad extended report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

    def get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return facebook ad extended report per organisation per account per campaign per device per day  # noqa: E501

        Facebook ad extended report per organisation per account per campaign per device per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_facebook_ad_extended_report_per_organisation_per_account_per_campaign_per_device_per_day_endpoint.call_with_http_info(**kwargs)

    def get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return google ads report per organisation per account per campaign per device per day  # noqa: E501

        Campaign group google ads report per organisation per account per campaign per device per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_google_ads_report_per_organisation_per_account_per_campaign_per_device_per_day_endpoint.call_with_http_info(**kwargs)

    def get_hashed_ad_campaign_report_per_organisation_per_account_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return hashed ad campaign report per organisation per account per day  # noqa: E501

        Hashed ad campaign report per organisation per account per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hashed_ad_campaign_report_per_organisation_per_account_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_hashed_ad_campaign_report_per_organisation_per_account_per_day_endpoint.call_with_http_info(**kwargs)

    def get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return linkedin ads extended report per organisation per account per campaign per day  # noqa: E501

        Linkedin ads extended report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_linked_in_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

    def get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return pinterest ads extended report per organisation per account per campaign per day  # noqa: E501

        Pinterest ads extended report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_pinterest_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

    def get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return snapchat ads extended report per organisation per account per campaign per day  # noqa: E501

        Snapchat ads extended report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_snapchat_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

    def get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day(
        self,
        organisation_uuids,
        **kwargs
    ):
        """Return twitter ads extended report per organisation per account per campaign per day  # noqa: E501

        Twitter ads extended report per organisation per account per campaign per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day(organisation_uuids, async_req=True)
        >>> result = thread.get()

        Args:
            organisation_uuids ([str]): Organisation uuids

        Keyword Args:
            from_date (date): From date. [optional]
            date_format (str): Outputted date format. [optional]
            format (str): Output format (use csv for large result sets). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['organisation_uuids'] = \
            organisation_uuids
        return self.get_twitter_ads_extended_report_per_organisation_per_account_per_campaign_per_day_endpoint.call_with_http_info(**kwargs)

