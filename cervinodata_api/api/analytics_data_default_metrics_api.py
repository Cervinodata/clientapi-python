# coding: utf-8

"""
    Cervinodata API documentation

    <div style='margin: 2em 0;'> <p> Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>). </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@cervinodata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date

from pydantic import Field, StrictStr, conlist

from typing import Optional


from cervinodata_api.api_client import ApiClient
from cervinodata_api.api_response import ApiResponse
from cervinodata_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AnalyticsDataDefaultMetricsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_analytics_report_per_campaign_per_day(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> str:  # noqa: E501
        """Return analytics report per campaign per day by organisation  # noqa: E501

        Analytics report per campaign per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_campaign_per_day(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_analytics_report_per_campaign_per_day_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_analytics_report_per_campaign_per_day_with_http_info(organisation_uuid, from_date, date_format, format, **kwargs)  # noqa: E501

    @validate_arguments
    def get_analytics_report_per_campaign_per_day_with_http_info(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return analytics report per campaign per day by organisation  # noqa: E501

        Analytics report per campaign per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_campaign_per_day_with_http_info(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_uuid',
            'from_date',
            'date_format',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_report_per_campaign_per_day" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_uuid']:
            _path_params['organisationUuid'] = _params['organisation_uuid']


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], date):
                _query_params.append(('from_date', _params['from_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('from_date', _params['from_date']))

        if _params.get('date_format') is not None:  # noqa: E501
            _query_params.append(('date_format', _params['date_format'].value))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/data/analytics-report-per-campaign-per-day/{organisationUuid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_analytics_report_per_channel_group_per_day(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> str:  # noqa: E501
        """Return analytics report per channel group per day by organisation  # noqa: E501

        Analytics report per channel group per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_channel_group_per_day(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_analytics_report_per_channel_group_per_day_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_analytics_report_per_channel_group_per_day_with_http_info(organisation_uuid, from_date, date_format, format, **kwargs)  # noqa: E501

    @validate_arguments
    def get_analytics_report_per_channel_group_per_day_with_http_info(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return analytics report per channel group per day by organisation  # noqa: E501

        Analytics report per channel group per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_channel_group_per_day_with_http_info(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_uuid',
            'from_date',
            'date_format',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_report_per_channel_group_per_day" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_uuid']:
            _path_params['organisationUuid'] = _params['organisation_uuid']


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], date):
                _query_params.append(('from_date', _params['from_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('from_date', _params['from_date']))

        if _params.get('date_format') is not None:  # noqa: E501
            _query_params.append(('date_format', _params['date_format'].value))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/data/analytics-report-per-channel-group-per-day/{organisationUuid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day(self, organisation_uuids : Annotated[conlist(StrictStr), Field(..., description="Organisation uuids")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> str:  # noqa: E501
        """Return analytics report per device per channel group per organisation per view per day  # noqa: E501

        Analytics report per device per channel group per organisation per view per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day(organisation_uuids, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day_with_http_info(organisation_uuids, from_date, date_format, format, **kwargs)  # noqa: E501

    @validate_arguments
    def get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day_with_http_info(self, organisation_uuids : Annotated[conlist(StrictStr), Field(..., description="Organisation uuids")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return analytics report per device per channel group per organisation per view per day  # noqa: E501

        Analytics report per device per channel group per organisation per view per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day_with_http_info(organisation_uuids, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_uuids',
            'from_date',
            'date_format',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_report_per_device_per_channel_group_per_organisation_per_view_per_day" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_uuids']:
            _path_params['organisationUuids'] = _params['organisation_uuids']
            _collection_formats['organisationUuids'] = 'csv'


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], date):
                _query_params.append(('from_date', _params['from_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('from_date', _params['from_date']))

        if _params.get('date_format') is not None:  # noqa: E501
            _query_params.append(('date_format', _params['date_format'].value))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/data/analytics-report-per-device-per-channel-group-per-organisation-per-view-per-day/{organisationUuids}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_analytics_report_per_device_per_day(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> str:  # noqa: E501
        """Return analytics report per device per day by organisation  # noqa: E501

        Analytics report per device per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_device_per_day(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_analytics_report_per_device_per_day_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_analytics_report_per_device_per_day_with_http_info(organisation_uuid, from_date, date_format, format, **kwargs)  # noqa: E501

    @validate_arguments
    def get_analytics_report_per_device_per_day_with_http_info(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return analytics report per device per day by organisation  # noqa: E501

        Analytics report per device per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_device_per_day_with_http_info(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_uuid',
            'from_date',
            'date_format',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_report_per_device_per_day" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_uuid']:
            _path_params['organisationUuid'] = _params['organisation_uuid']


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], date):
                _query_params.append(('from_date', _params['from_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('from_date', _params['from_date']))

        if _params.get('date_format') is not None:  # noqa: E501
            _query_params.append(('date_format', _params['date_format'].value))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/data/analytics-report-per-device-per-day/{organisationUuid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_analytics_report_per_source_medium_per_day(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> str:  # noqa: E501
        """Return analytics report per source medium per day by organisation  # noqa: E501

        Analytics report per source medium per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_source_medium_per_day(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_analytics_report_per_source_medium_per_day_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_analytics_report_per_source_medium_per_day_with_http_info(organisation_uuid, from_date, date_format, format, **kwargs)  # noqa: E501

    @validate_arguments
    def get_analytics_report_per_source_medium_per_day_with_http_info(self, organisation_uuid : Annotated[StrictStr, Field(..., description="Organisation uuid")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return analytics report per source medium per day by organisation  # noqa: E501

        Analytics report per source medium per day by organisation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analytics_report_per_source_medium_per_day_with_http_info(organisation_uuid, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuid: Organisation uuid (required)
        :type organisation_uuid: str
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_uuid',
            'from_date',
            'date_format',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analytics_report_per_source_medium_per_day" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_uuid']:
            _path_params['organisationUuid'] = _params['organisation_uuid']


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], date):
                _query_params.append(('from_date', _params['from_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('from_date', _params['from_date']))

        if _params.get('date_format') is not None:  # noqa: E501
            _query_params.append(('date_format', _params['date_format'].value))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/data/analytics-report-per-source-medium-per-day/{organisationUuid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day(self, organisation_uuids : Annotated[conlist(StrictStr), Field(..., description="Organisation uuids")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> str:  # noqa: E501
        """Return GA4 report per device per channel group per organisation per property per day  # noqa: E501

        GA4 report per device per channel group per organisation per property per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day(organisation_uuids, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day_with_http_info(organisation_uuids, from_date, date_format, format, **kwargs)  # noqa: E501

    @validate_arguments
    def get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day_with_http_info(self, organisation_uuids : Annotated[conlist(StrictStr), Field(..., description="Organisation uuids")], from_date : Annotated[Optional[date], Field(description="From date")] = None, date_format : Annotated[Optional[StrictStr], Field(description="Outputted date format")] = None, format : Annotated[Optional[StrictStr], Field(description="Output format (use csv for large result sets)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return GA4 report per device per channel group per organisation per property per day  # noqa: E501

        GA4 report per device per channel group per organisation per property per day  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day_with_http_info(organisation_uuids, from_date, date_format, format, async_req=True)
        >>> result = thread.get()

        :param organisation_uuids: Organisation uuids (required)
        :type organisation_uuids: List[str]
        :param from_date: From date
        :type from_date: date
        :param date_format: Outputted date format
        :type date_format: str
        :param format: Output format (use csv for large result sets)
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_uuids',
            'from_date',
            'date_format',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ga4_report_per_device_per_channel_group_per_organisation_per_property_per_day" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organisation_uuids']:
            _path_params['organisationUuids'] = _params['organisation_uuids']
            _collection_formats['organisationUuids'] = 'csv'


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], date):
                _query_params.append(('from_date', _params['from_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('from_date', _params['from_date']))

        if _params.get('date_format') is not None:  # noqa: E501
            _query_params.append(('date_format', _params['date_format'].value))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/data/ga4-report-per-device-per-channel-group-per-organisation-per-property-per-day/{organisationUuids}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
